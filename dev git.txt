git ---> dvcs

svn - centralized vcs

vcs?

its like a database maintains multiple versions of ur project.

dvcs:

backup of code base
work offline
maintians local copy 
collaboration
chnages done in the local copy will be tracked

	

git hub
git lab
git bucket
bit bucket

hosting repo
additional options

git hub - private, public

mylatestrepo -local repo

master branch


devopsrepo - central repo

master branch

if u need to push to central repo , where do u want to do that 

do it in mastrer branch of central repo

git push --set -u origin master 

in local repo

when u need a branch?

when u go for hot fixes , bug fixes or u implememnt new components

what will be the content of the my branch?

it ll have all the files in master branch also in my branch



git init 

git add

git commit -m

git reset HEAD <file>

git stash

git checkout <file>

git rm

git branch 

git checkout branchname

git status

git log

BY default local repo will be using master branch

git show
git show d94c98b6d564374937f92362f75b5be3c150d85f --name-only

git log --oneline

B:\my>git branch
* master

B:\my>git branch header

B:\my>git branch footer

B:\my>git checkout header
Switched to branch 'header'

B:\my>git branch
  footer
* header
  master

B:\my>git status
On branch header
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        branch file1.txt

nothing added to commit but untracked files present (use "git add" to track)

B:\my>git commit -am "fast commit"
On branch header
Untracked files:
        branch file1.txt

nothing added to commit but untracked files present


B:\my>git commit -am "fast commit"
On branch header
Untracked files:
        branch file1.txt

nothing added to commit but untracked files present

B:\my>git commit -a -m "fast commit"
On branch header
Untracked files:
        branch file1.txt

nothing added to commit but untracked files present

B:\my>git commit -am "fast commit"
On branch header
Untracked files:
        branch file1.txt

nothing added to commit but untracked files present

B:\my>git add .

B:\my>git commit  -m "in branch - commit 1"
[header eaa37f1] in branch - commit 1
 1 file changed, 1 insertion(+)
 create mode 100644 branch file1.txt

B:\my>git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)

B:\my>git checkout header
Switched to branch 'header'

B:\my>git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        check stash.txt
        checking.txt

nothing added to commit but untracked files present (use "git add" to track)

B:\my>git add .

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   check stash.txt
        new file:   checking.txt


B:\my>git stash
Saved working directory and index state WIP on master: 944a866 second file added
HEAD is now at 944a866 second file added

B:\my>git checkout header
Switched to branch 'header'

B:\my>git status
On branch header
nothing to commit, working directory clean

B:\my>git status
On branch header
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        branch file2.txt

nothing added to commit but untracked files present (use "git add" to track)

B:\my>git add .

B:\my>git commit -m "branch file 2 added"
[header f81a9f1] branch file 2 added
 1 file changed, 1 insertion(+)
 create mode 100644 branch file2.txt

B:\my>git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)
nothing to commit, working directory clean

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        stash1.txt
        stash2.txt

nothing added to commit but untracked files present (use "git add" to track)

B:\my>git stash
No local changes to save

B:\my>git add .

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   stash1.txt
        new file:   stash2.txt


B:\my>git stash
Saved working directory and index state WIP on master: 944a866 second file added
HEAD is now at 944a866 second file added

B:\my>git stash list
stash@{0}: WIP on master: 944a866 second file added
stash@{1}: WIP on master: 944a866 second file added

B:\my>git stash pop
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   stash1.txt
        new file:   stash2.txt

Dropped refs/stash@{0} (41673221c9a52b181faaa5b2b74734229f9f8d3a)

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   stash1.txt
        new file:   stash2.txt


B:\my>git reset HEAD

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        stash1.txt
        stash2.txt

nothing added to commit but untracked files present (use "git add" to track)

B:\my>git add .

B:\my>git stash
Saved working directory and index state WIP on master: 944a866 second file added
HEAD is now at 944a866 second file added

B:\my>git checkout header
Switched to branch 'header'

B:\my>git status
On branch header
nothing to commit, working directory clean

B:\my>git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)
nothing to commit, working directory clean

B:\my>git stash list
stash@{0}: WIP on master: 944a866 second file added
stash@{1}: WIP on master: 944a866 second file added

B:\my>git stash pop
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   stash1.txt
        new file:   stash2.txt

Dropped refs/stash@{0} (9726f03ebd0c98a9274d8df83baaf271d5be88be)

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 4 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   stash1.txt
        new file:   stash2.txt


B:\my>git commit -m "dstash files added"
[master 9ec27a1] dstash files added
 2 files changed, 96 insertions(+)
 create mode 100644 stash1.txt
 create mode 100644 stash2.txt

B:\my>git stash pop
On branch master
Your branch is ahead of 'origin/master' by 5 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   check stash.txt
        new file:   checking.txt

Dropped refs/stash@{0} (a63eb2bab35288bfbabd0debd2697157d27c34f7)

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 5 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   check stash.txt
        new file:   checking.txt


B:\my>git commit -m "old stashed files"
[master dd79659] old stashed files
 2 files changed, 96 insertions(+)
 create mode 100644 check stash.txt
 create mode 100644 checking.txt

B:\my>git branch
  footer
  header
* master

B:\my>git add .

B:\my>git stash
Saved working directory and index state WIP on master: dd79659 old stashed files
HEAD is now at dd79659 old stashed files

B:\my>git checkout header
Switched to branch 'header'

B:\my>git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 6 commits.
  (use "git push" to publish your local commits)

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 6 commits.
  (use "git push" to publish your local commits)
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        sts second stash.txt

nothing added to commit but untracked files present (use "git add" to track)

B:\my>git add .

B:\my>git stash
Saved working directory and index state WIP on master: dd79659 old stashed files
HEAD is now at dd79659 old stashed files

B:\my>git checkout header
Switched to branch 'header'

B:\my>git checkout master
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 6 commits.
  (use "git push" to publish your local commits)

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 6 commits.
  (use "git push" to publish your local commits)
nothing to commit, working directory clean

B:\my>git stash list
stash@{0}: WIP on master: dd79659 old stashed files
stash@{1}: WIP on master: dd79659 old stashed files

B:\my>git stash apply
On branch master
Your branch is ahead of 'origin/master' by 6 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   sts second stash.txt


B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 6 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   sts second stash.txt


B:\my>git commit -m "second stash recovered"
[master 949fdf4] second stash recovered
 1 file changed, 48 insertions(+)
 create mode 100644 sts second stash.txt

B:\my>git stash list
stash@{0}: WIP on master: dd79659 old stashed files
stash@{1}: WIP on master: dd79659 old stashed files

B:\my>git stash apply
On branch master
Your branch is ahead of 'origin/master' by 7 commits.
  (use "git push" to publish your local commits)
nothing to commit, working directory clean

B:\my>git stash list
stash@{0}: WIP on master: dd79659 old stashed files
stash@{1}: WIP on master: dd79659 old stashed files


B:\my>git add .

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 7 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   content1.txt
        new file:   untracked.txt


B:\my>git stash -u
Saved working directory and index state WIP on master: 949fdf4 second stash recovered
HEAD is now at 949fdf4 second stash recovered

B:\my>git stash list
stash@{0}: WIP on master: 949fdf4 second stash recovered
stash@{1}: WIP on master: dd79659 old stashed files
stash@{2}: WIP on master: dd79659 old stashed files

B:\my>git stash pop
On branch master
Your branch is ahead of 'origin/master' by 7 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   content1.txt
        new file:   untracked.txt

Dropped refs/stash@{0} (f6c372fd6456524e03f137f7d6c500f3770e334b)

B:\my>git reset HEAD

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 7 commits.
  (use "git push" to publish your local commits)
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        content1.txt
        untracked.txt

nothing added to commit but untracked files present (use "git add" to track)

B:\my>git add content1.txt

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 7 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   content1.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        untracked.txt


B:\my>git stash
Saved working directory and index state WIP on master: 949fdf4 second stash recovered
HEAD is now at 949fdf4 second stash recovered

B:\my>git stash list
stash@{0}: WIP on master: 949fdf4 second stash recovered
stash@{1}: WIP on master: dd79659 old stashed files
stash@{2}: WIP on master: dd79659 old stashed files

B:\my>git stash pop
On branch master
Your branch is ahead of 'origin/master' by 7 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   content1.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        untracked.txt

Dropped refs/stash@{0} (f31c14046823aed609821c387e5e2766202a0552)

B:\my>git stash pop stash@{1}
On branch master
Your branch is ahead of 'origin/master' by 7 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   content1.txt
        new file:   sts apply.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        untracked.txt

Dropped stash@{1} (53221a89dfc3c79cde5c223d04828573415898a2)

B:\my>git stash show
 sts second stash.txt | 48 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 48 insertions(+)

B:\my>git stash show stash@{1}
fatal: Log for 'stash' only has 1 entries.

B:\my>git stash drop stash@{1}
fatal: Log for 'stash' only has 1 entries.

B:\my>git stash  clear

B:\my>git stash list

B:\my>git status
On branch master
Your branch is ahead of 'origin/master' by 7 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   content1.txt
        new file:   sts apply.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        untracked.txt



git clone -> to  clone existing repository in github in local machine

git add . or git add -all -> to add all the files in working directory to staging area

git reset head -> to remove all the files added to staging area

	command can be considered an 'undo' type command.

	 In some cases, we might realize that the changes that we made were
	 not correct.(may be modified some files, added and deleted a lot of lines )

	In simple terms, we want to revert the changes that we just made 
	and go back to prev state.
	
	This technique is called “reset to HEAD” 

What is HEAD:
Git maintains a variable for referencing, called HEAD 
to the latest commit in the recent checkout branch. 

we can imagine HEAD as the “current committed branch”. 
we can think of as a pointer, as the purpose of this variable is to
point to or act as a reference to a particular commit in the repository. 
Say, we make a new commit in the repo then the pointer or HEAD is going to 
move or change its position to point to a new commit.

HEAD points to the starting point of the present branch in the repository 
at all times. It can be thought of as the last state or the last checked out 
point in a repository


Git Hard reset:
	
 git reset --hard HEAD       (going back to HEAD)
 git reset --hard HEAD^       (going back 1 commit before HEAD)
 git reset --hard HEAD~2       (going back 2 commit before HEAD)

	HEAD or HEAD^ or HEAD~2 ---> to go back ward
	

The purpose of the “git reset” command is to move the current 
HEAD to the commit specified 

“–hard” option is used in order to reset the files of the index (or the staging area)
 and of the working directory.

after that check log:

git log --oneline --graph


example:

B:\newrepo>git ls-tree -r master --name-only
a.txt
c.txt
d.txt

B:\newrepo>git reset --hard HEAD~2
HEAD is now at 2aab32c file added

B:\newrepo>git ls-tree -r master --name-only
a.txt

B:\newrepo>git reset --hard HEAD@{2}
HEAD is now at 2aab32c file added

B:\newrepo>git ls-tree -r master --name-only
a.txt

B:\newrepo>git reset --hard HEAD@{1}
HEAD is now at 36c0752 commit 3rd file n master

B:\newrepo>git ls-tree -r master --name-only
a.txt
c.txt
d.txt


Undoing hard reset to HEAD
HEAD@{1} - to get back the changes which we resetted - go forward
HEAD@{2} ....

GIT Soft reset:

B:\newrepo>git reset --soft HEAD~2

B:\newrepo>git ls-tree -r master --name-only
a.txt

B:\newrepo>git status
On branch master
Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.
  (use "git pull" to update your local branch)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   c.txt
        new file:   d.txt

soft reset - will not remove the files but it adds to staging area

chk the below hard  reset option :

B:\newrepo>git reset --hard HEAD~1
HEAD is now at 2aab32c file added

B:\newrepo>git ls-tree -r master --name-only
a.txt

B:\newrepo>git status
On branch master
Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.
  (use "git pull" to update your local branch)
nothing to commit, working directory clean

here the files are not available physically and also in ls command
=====================================================================================
NOTE:
One popular usage of the soft reset command is to combine many different commits into a single one.
=====================================================================================

Remove Files From Git Commit

git reset --soft HEAD~1

then remove from staging by using git rm command

git rm --cached <file>

When you are done with the modifications, you can simply commit your changes again with the “–amend” option

git commit --amend or git commit --a

then check using

git ls-files

Check also for Git Restore 

Remove Specific File from Git Commit:

git reset HEAD^ -- <file name>


11:01 18-05-2020
==============---===


B:\atos\git_day3>git remote add https://github.com/kathir-freelance/devopsrepo.git
usage: git remote add [<options>] <name> <url>

    -f, --fetch           fetch the remote branches
    --tags                import all tags and associated objects when fetching
                          or do not fetch any tag at all (--no-tags)
    -t, --track <branch>  branch(es) to track
    -m, --master <branch>
                          master branch
    --mirror[=<push|fetch>]
                          set up remote as a mirror to push to or fetch from


B:\atos\git_day3>git remote add  origin https://github.com/kathir-freelance/devopsrepo.git

B:\atos\git_day3>git status
On branch master
nothing to commit, working directory clean

B:\atos\git_day3>git pull
warning: no common commits
remote: Enumerating objects: 52, done.
remote: Counting objects: 100% (52/52), done.
remote: Compressing objects: 100% (26/26), done.
remote: Total 52 (delta 2), reused 49 (delta 1), pack-reused 0
Unpacking objects: 100% (52/52), done.
From https://github.com/kathir-freelance/devopsrepo
 * [new branch]      master     -> origin/master
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/<branch> master


B:\atos\git_day3>git pull -u origin master
error: unknown switch `u'
usage: git pull [<options>] [<repository> [<refspec>...]]

    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --progress            force progress reporting

Options related to merging
    -r, --rebase[=<false|true|preserve|interactive>]
                          incorporate changes by rebasing rather than merging
    -n                    do not show a diffstat at the end of the merge
    --stat                show a diffstat at the end of the merge
    --log[=<n>]           add (at most <n>) entries from shortlog to merge commit message
    --squash              create a single commit instead of doing a merge
    --commit              perform a commit if the merge succeeds (default)
    --edit                edit message before committing
    --ff                  allow fast-forward
    --ff-only             abort if fast-forward is not possible
    --verify-signatures   verify that the named commit has a valid GPG signature
    --autostash           automatically stash/stash pop before and after rebase
    -s, --strategy <strategy>
                          merge strategy to use
    -X, --strategy-option <option=value>
                          option for selected merge strategy
    -S, --gpg-sign[=<key-id>]
                          GPG sign commit
    --allow-unrelated-histories
                          allow merging unrelated histories

Options related to fetching
    --all                 fetch from all remotes
    -a, --append          append to .git/FETCH_HEAD instead of overwriting
    --upload-pack <path>  path to upload pack on remote end
    -f, --force           force overwrite of local branch
    -t, --tags            fetch all tags and associated objects
    -p, --prune           prune remote-tracking branches no longer on remote
    --recurse-submodules[=<on-demand>]
                          control recursive fetching of submodules
    -j, --jobs[=<n>]      number of submodules pulled in parallel
    --dry-run             dry run
    -k, --keep            keep downloaded pack
    --depth <depth>       deepen history of shallow clone
    --unshallow           convert to a complete repository
    --update-shallow      accept refs that update .git/shallow
    --refmap <refmap>     specify fetch refmap


B:\atos\git_day3>git push
fatal: The current branch master has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin master


B:\atos\git_day3>git push --set -u origin master
Fatal: HttpRequestException encountered.
Username for 'https://github.com': natararajan1959@gmail.com
Password for 'https://natararajan1959@gmail.com@github.com':
To https://github.com/kathir-freelance/devopsrepo.git
 ! [rejected]        master -> master (non-fast-forward)
error: failed to push some refs to 'https://github.com/kathir-freelance/devopsrepo.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

B:\atos\git_day3>git pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/<branch> master


B:\atos\git_day3>git pull origin master
From https://github.com/kathir-freelance/devopsrepo
 * branch            master     -> FETCH_HEAD
fatal: refusing to merge unrelated histories

B:\atos\git_day3>git pull origin master --allow-unrelated-histories
From https://github.com/kathir-freelance/devopsrepo
 * branch            master     -> FETCH_HEAD
Merge made by the 'recursive' strategy.
 a.txt                                              |   1 +
 b.txt                                              |   1 +
 c.txt                                              |   1 +
 d.txt                                              |   1 +
 dir1/e.txt                                         |   1 +
 dir1/f-dir.txt                                     |   1 +
 dir1/g-dir.txt                                     |   1 +
 gmail/.classpath                                   |  26 ++++++++++++++
 gmail/.project                                     |  23 +++++++++++++
 gmail/.settings/org.eclipse.core.resources.prefs   |   4 +++
 gmail/.settings/org.eclipse.jdt.core.prefs         |   5 +++
 gmail/.settings/org.eclipse.m2e.core.prefs         |   4 +++
 gmail/pom.xml                                      |  16 +++++++++
 gmail/src/main/java/com/google/gmail/App.java      |  17 +++++++++
 gmail/src/test/java/com/google/gmail/AppTest.java  |  38 +++++++++++++++++++++
 gmail/target/classes/META-INF/MANIFEST.MF          |   5 +++
 .../META-INF/maven/com.google/gmail/pom.properties |   7 ++++
 .../META-INF/maven/com.google/gmail/pom.xml        |  16 +++++++++
 gmail/target/classes/com/google/gmail/App.class    | Bin 0 -> 904 bytes
 .../test-classes/com/google/gmail/AppTest.class    | Bin 0 -> 619 bytes
 my file                                            |   1 +
 21 files changed, 169 insertions(+)
 create mode 100644 a.txt
 create mode 100644 b.txt
 create mode 100644 c.txt
 create mode 100644 d.txt
 create mode 100644 dir1/e.txt
 create mode 100644 dir1/f-dir.txt
 create mode 100644 dir1/g-dir.txt
 create mode 100644 gmail/.classpath
 create mode 100644 gmail/.project
 create mode 100644 gmail/.settings/org.eclipse.core.resources.prefs
 create mode 100644 gmail/.settings/org.eclipse.jdt.core.prefs
 create mode 100644 gmail/.settings/org.eclipse.m2e.core.prefs
 create mode 100644 gmail/pom.xml
 create mode 100644 gmail/src/main/java/com/google/gmail/App.java
 create mode 100644 gmail/src/test/java/com/google/gmail/AppTest.java
 create mode 100644 gmail/target/classes/META-INF/MANIFEST.MF
 create mode 100644 gmail/target/classes/META-INF/maven/com.google/gmail/pom.properties
 create mode 100644 gmail/target/classes/META-INF/maven/com.google/gmail/pom.xml
 create mode 100644 gmail/target/classes/com/google/gmail/App.class
 create mode 100644 gmail/target/test-classes/com/google/gmail/AppTest.class
 create mode 100644 my file

B:\atos\git_day3>git push
fatal: The current branch master has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin master


B:\atos\git_day3> git push --set-upstream origin master
Fatal: HttpRequestException encountered.
Username for 'https://github.com': natararajan1959@gmail.com
Password for 'https://natararajan1959@gmail.com@github.com':
Counting objects: 7, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (7/7), 1.17 KiB | 0 bytes/s, done.
Total 7 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/kathir-freelance/devopsrepo.git
   f97a28a..a146380  master -> master
Branch master set up to track remote branch master from origin.

B:\atos\git_day3>git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   thrid.html

no changes added to commit (use "git add" and/or "git commit -a")

B:\atos\git_day3>git add .

B:\atos\git_day3>git commit -m "third html modified"
[master 53a4aa9] third html modified
 1 file changed, 1 insertion(+)

B:\atos\git_day3>git reflog
53a4aa9 HEAD@{0}: commit: third html modified
a146380 HEAD@{1}: pull origin master --allow-unrelated-histories: Merge made by the 'recursive' strategy.
ca5c34d HEAD@{2}: commit: 2 & 3rd file added
18c15dd HEAD@{3}: commit (initial): first html added

B:\atos\git_day3>git diff 53a4aa9 ca5c34d
diff --git a/a.txt b/a.txt
deleted file mode 100644
index 21e64d5..0000000
--- a/a.txt
+++ /dev/null
@@ -1 +0,0 @@
-this is a file
\ No newline at end of file
diff --git a/b.txt b/b.txt
deleted file mode 100644
index 8d776cf..0000000
--- a/b.txt
+++ /dev/null
@@ -1 +0,0 @@
-file b
\ No newline at end of file
diff --git a/c.txt b/c.txt
deleted file mode 100644
index ced9817..0000000
--- a/c.txt
+++ /dev/null
@@ -1 +0,0 @@
-file c
\ No newline at end of file
diff --git a/d.txt b/d.txt
deleted file mode 100644
index e20384e..0000000
--- a/d.txt
+++ /dev/null
:...skipping...
diff --git a/a.txt b/a.txt
deleted file mode 100644
index 21e64d5..0000000
--- a/a.txt
+++ /dev/null
@@ -1 +0,0 @@
-this is a file
\ No newline at end of file
diff --git a/b.txt b/b.txt
deleted file mode 100644
index 8d776cf..0000000
--- a/b.txt
+++ /dev/null
@@ -1 +0,0 @@
-file b
\ No newline at end of file
diff --git a/c.txt b/c.txt
deleted file mode 100644
index ced9817..0000000
--- a/c.txt
+++ /dev/null
@@ -1 +0,0 @@
-file c
\ No newline at end of file
diff --git a/d.txt b/d.txt
deleted file mode 100644
index e20384e..0000000
--- a/d.txt
+++ /dev/null
@@ -1 +0,0 @@
-file d
\ No newline at end of file

B:\atos\git_day3>git diff 53a4aa9

B:\atos\git_day3>cd..

B:\atos>mkdir git_diff

B:\atos>cd git_diff

B:\atos\git_diff>git init
Initialized empty Git repository in B:/atos/git_diff/.git/

B:\atos\git_diff>git add .

B:\atos\git_diff>git commit -m "first file added"
[master (root-commit) b530a3b] first file added
 1 file changed, 1 insertion(+)
 create mode 100644 file1.txt

B:\atos\git_diff>git add .

B:\atos\git_diff>git commit -m "second file added"
[master a047f16] second file added
 1 file changed, 1 insertion(+)
 create mode 100644 file 2.txt

B:\atos\git_diff>git log
commit a047f16a1e151a43881cc753373e31900723a07e
Author: kathir-freelance <natararajan1959@gmail.com>
Date:   Mon May 18 10:51:24 2020 +0530

    second file added

commit b530a3b7320533594571aaa72c84253cccc7dd76
Author: kathir-freelance <natararajan1959@gmail.com>
Date:   Mon May 18 10:50:46 2020 +0530

    first file added

B:\atos\git_diff>git diff a047f16a1e151a43881cc753373e31900723a07e b530a3b7320533594571aaa72c84253cccc7dd76
diff --git a/file 2.txt b/file 2.txt
deleted file mode 100644
index 5e14ca8..0000000
--- a/file 2.txt
+++ /dev/null
@@ -1 +0,0 @@
-file 2 hi hello
\ No newline at end of file

B:\atos\git_diff>git add .

B:\atos\git_diff>git commit -m "file 2 modified"
[master 10c0ad1] file 2 modified
 1 file changed, 1 insertion(+), 1 deletion(-)

B:\atos\git_diff>git log
commit 10c0ad1a1b3572abb8567eed66a503f4cba774d3
Author: kathir-freelance <natararajan1959@gmail.com>
Date:   Mon May 18 10:54:24 2020 +0530

    file 2 modified

commit a047f16a1e151a43881cc753373e31900723a07e
Author: kathir-freelance <natararajan1959@gmail.com>
Date:   Mon May 18 10:51:24 2020 +0530

    second file added

commit b530a3b7320533594571aaa72c84253cccc7dd76
Author: kathir-freelance <natararajan1959@gmail.com>
Date:   Mon May 18 10:50:46 2020 +0530

    first file added

B:\atos\git_diff>git  diff 10c0ad1a1b3572abb8567eed66a503f4cba774d3  a047f16a1e151a43881cc753373e31900723a07e
diff --git a/file 2.txt b/file 2.txt
index 3e59eb7..5e14ca8 100644
--- a/file 2.txt
+++ b/file 2.txt
@@ -1 +1 @@
-i am adding content ...file 2 hi hello
\ No newline at end of file
+file 2 hi hello
\ No newline at end of file

B:\atos\git_diff>git  diff 10c0ad1a1b3572abb8567eed66a503f4cba774d3  a047f16a1e151a43881cc753373e31900723a07e
diff --git a/file 2.txt b/file 2.txt
index 3e59eb7..5e14ca8 100644
--- a/file 2.txt
+++ b/file 2.txt
@@ -1 +1 @@
-i am adding content ...file 2 hi hello
\ No newline at end of file
+file 2 hi hello
\ No newline at end of file

B:\atos\git_diff>git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   file 2.txt

no changes added to commit (use "git add" and/or "git commit -a")

B:\atos\git_diff>git add .

B:\atos\git_diff>git commit -m "dot removed"
[master 0d1fcd4] dot removed
 1 file changed, 1 insertion(+), 1 deletion(-)

B:\atos\git_diff>git reflog
0d1fcd4 HEAD@{0}: commit: dot removed
10c0ad1 HEAD@{1}: commit: file 2 modified
a047f16 HEAD@{2}: commit: second file added
b530a3b HEAD@{3}: commit (initial): first file added

B:\atos\git_diff>git diff 0d1fcd4 10c0ad1
diff --git a/file 2.txt b/file 2.txt
index 5561037..3e59eb7 100644
--- a/file 2.txt
+++ b/file 2.txt
@@ -1 +1 @@
-i am adding content file 2 hi hello
\ No newline at end of file
+i am adding content ...file 2 hi hello
\ No newline at end of file

B:\atos\git_diff>git diff -color-words
error: invalid option: -color-words

B:\atos\git_diff>git diff-color-words
git: 'diff-color-words' is not a git command. See 'git --help'.

B:\atos\git_diff>git diff --color-words

B:\atos\git_diff>git diff 0d1fcd4 10c0ad1
diff --git a/file 2.txt b/file 2.txt
index 5561037..3e59eb7 100644
--- a/file 2.txt
+++ b/file 2.txt
@@ -1 +1 @@
-i am adding content file 2 hi hello
\ No newline at end of file
+i am adding content ...file 2 hi hello
\ No newline at end of file

